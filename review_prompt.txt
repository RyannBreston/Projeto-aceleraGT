## Código Completo do Aplicativo para Análise e Melhorias

Aqui está o código-fonte completo do aplicativo "Corridinha GT / Supermoda". O objetivo é que você analise a estrutura, a lógica, a usabilidade e o código em si, e depois forneça sugestões de melhorias.

---

### **1. `prompt.txt` (Prompt Original do Projeto)**

```
## Prompt para Criação de Aplicativo de Metas de Vendas (Goal Getter)

**Objetivo:** Criar uma aplicação web completa para uma equipe de vendas, permitindo o acompanhamento de metas, cálculo de incentivos e gerenciamento de vendedores. A aplicação deve ser intuitiva, visualmente agradável e persistir todos os dados no `localStorage` do navegador para simplicidade (sem a necessidade de um banco de dados backend).

**Nome do Aplicativo:** Goal Getter (ou Corridinha GT)

**Stack de Tecnologia:**
*   **Framework:** Next.js com App Router
*   **Linguagem:** TypeScript
*   **UI Components:** ShadCN/UI
*   **Estilização:** Tailwind CSS
*   **Lógica de Cálculo (GenAI):** Genkit

---

### **Estrutura de Páginas e Componentes**

#### **1. Página Inicial (Tela de Boas-Vindas)**
*   **Rota:** `/`
*   **Funcionalidade:**
    *   Deve exibir o logotipo e o nome do aplicativo.
    *   Deve carregar a lista de vendedores a partir do `localStorage`.
    *   Deve exibir um botão para "Administrador" e um botão para cada vendedor cadastrado.
    *   Ao clicar em um botão, o usuário é redirecionado para a página do painel com o `id` correspondente na URL (ex: `/dashboard?tab=admin` ou `/dashboard?tab=seller-123`).

#### **2. Página do Painel (Dashboard)**
*   **Rota:** `/dashboard`
*   **Funcionalidade:**
    *   É a página principal onde toda a mágica acontece.
    *   Deve usar um sistema de abas (Tabs) para alternar entre a visão de cada vendedor e o painel do administrador.
    *   A aba ativa é determinada pelo parâmetro `tab` na URL. Se nenhum `tab` for fornecido, deve exibir a aba do primeiro vendedor da lista.
    *   Todo o estado da aplicação (metas, valores, vendedores) deve ser salvo no `localStorage` sempre que houver uma alteração e carregado quando a página for aberta.

---

### **Detalhes do Painel (Dashboard)**

#### **Aba do Administrador**

Esta aba centraliza todo o gerenciamento.

*   **Gerenciar Vendedores:**
    *   Um campo de texto e um botão para **adicionar um novo vendedor**.
    *   Uma lista de vendedores existentes, cada um com botões para **editar o nome** e **remover** (com um diálogo de confirmação).

*   **Lançar Vendas:**
    *   Uma seção para inserir os dados de desempenho de cada vendedor.
    *   Para cada vendedor, deve haver campos para:
        1.  **Vendas (R$)**
        2.  **PA (Produtos por Atendimento)**
        3.  **Ticket Médio (R$)**
        4.  **Corridinha (R$)** - Este valor é diretamente o bônus.

*   **Definir Metas e Prêmios:**
    *   **Metas de Vendas:**
        *   Metinha (valor da meta e valor do prêmio)
        *   Meta (valor da meta e valor do prêmio)
        *   Metona (valor da meta e valor do prêmio)
        *   Lendária (valor da meta e regras de bônus: um prêmio adicional a cada `X` reais vendidos acima da Metona).
    *   **Metas de PA:**
        *   Quatro níveis de metas com seus respectivos prêmios.
    *   **Metas de Ticket Médio:**
        *   Quatro níveis de metas com seus respectivos prêmios.

*   **Botão de Ação Principal:**
    *   Um botão "Salvar Metas e Calcular Todos os Incentivos". Ao ser clicado, ele salva todas as configurações no `localStorage` e dispara o cálculo dos incentivos para todos os vendedores.

#### **Aba do Vendedor**

Esta aba é focada na visualização de progresso e ganhos.

*   **Painel de Progresso:**
    *   **Gráfico de Progresso de Vendas:** Uma barra de progresso visual que mostra as vendas atuais em relação às metas (Metinha, Meta, Metona, Lendária).
    *   **Detalhes dos Prêmios de Vendas (Abaixo do Gráfico):** Uma lista mostrando o prêmio para cada meta de vendas (Metinha, Meta, etc.) e destacando qual foi atingida.
    *   **Progresso de PA e Ticket Médio:** Barras de progresso separadas para PA e Ticket Médio, mostrando o valor atual em relação à meta mais alta.
    *   **Ranking:** Exibir a posição (`1º`, `2º`, etc.) do vendedor em relação aos outros em: Vendas, PA, Ticket Médio, Corridinha e Total de Incentivos.
    *   **Detalhes dos Outros Prêmios:** Mostrar os valores ganhos com Bônus PA, Bônus Ticket Médio e Corridinha Diária.
    *   **Ganho Total:** Um destaque visual mostrando a **soma de todos os prêmios e bônus** que o vendedor tem direito a receber.

---

### **Lógica de Cálculo (Fluxo Genkit)**

*   **Nome do Fluxo:** `incentiveProjection`
*   **Input:** Todos os dados de vendas de um vendedor (vendas, pa, ticket medio, corridinha) e todas as metas e prêmios definidos pelo administrador.
*   **Output:** Um objeto com o valor calculado para cada tipo de prêmio/bônus.
*   **Regras de Negócio:**
    1.  **Prêmio de Vendas:** O vendedor recebe o prêmio **apenas da meta mais alta que atingiu**. Se atingir a Metona, recebe o prêmio da Metona, não o da Meta e Metinha.
    2.  **Bônus Lendária:** É um bônus cumulativo. Se a meta Lendária for atingida, calcula-se quantos múltiplos do "valor de venda para bônus" foram superados e multiplica-se pelo "valor do prêmio do bônus".
    3.  **Bônus de PA e Ticket Médio:** O vendedor recebe o prêmio correspondente ao nível mais alto atingido.
    4.  **Bônus Corridinha Diária:** O valor do bônus é exatamente o valor inserido no campo "Corridinha" pelo administrador.

### **Estilo e UX**
*   **Fonte:** Montserrat
*   **Cores:**
    *   Primária: Azul Vibrante (`#29ABE2`)
    *   Fundo: Azul Claro (`#E5F6FD`)
    *   Destaque (Sucesso): Verde (`#90EE90`)
*   Usar componentes do ShadCN/UI para todos os elementos de interface: `Card`, `Button`, `Input`, `Tabs`, `Progress`, `AlertDialog`, `Tooltip`, etc.
*   A aplicação deve ser responsiva e funcionar bem em dispositivos móveis e desktops.
*   Deve haver feedback visual claro durante as operações (ex: um ícone de "carregando" no botão de calcular enquanto o processo está em andamento).
```

---

### **2. `package.json` (Dependências)**

```json
{
  "name": "nextn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack -p 9002",
    "genkit:dev": "genkit start -- tsx src/ai/dev.ts",
    "genkit:watch": "genkit start -- tsx --watch src/ai/dev.ts",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@genkit-ai/googleai": "^1.14.1",
    "@genkit-ai/next": "^1.14.1",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.1.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "dotenv": "^16.5.0",
    "embla-carousel-react": "^8.6.0",
    "firebase": "^11.9.1",
    "framer-motion": "^11.2.10",
    "genkit": "^1.14.1",
    "lucide-react": "^0.475.0",
    "next": "15.3.3",
    "patch-package": "^8.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.2",
    "recharts": "^2.15.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "genkit-cli": "^1.14.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
```

---

### **3. Estrutura de Dados (`src/lib/storage.ts`)**

```typescript
import { IncentiveProjectionOutput } from "@/ai/flows/incentive-projection";

const LOCAL_STORAGE_KEY = "goalGetterState_v2";
const ADMIN_PASSWORD_KEY = "goalGetterAdminPassword";
const DEFAULT_ADMIN_PASSWORD = "supermoda";


export interface Seller {
  id: string;
  name: string;
  avatarId: string;
  vendas: number;
  pa: number;
  ticketMedio: number;
  corridinhaDiaria: number;
  password?: string;
}

export interface Goals {
  metaMinha: number;
  meta: number;
  metona: number;
  metaLendaria: number;
  legendariaBonusValorVenda: number;
  legendariaBonusValorPremio: number;
  metaMinhaPrize: number;
  metaPrize: number;
  metonaPrize: number;
  paGoal1: number;
  paGoal2: number;
  paGoal3: number;
  paGoal4: number;
  paPrize1: number;
  paPrize2: number;
  paPrize3: number;
  paPrize4: number;
  ticketMedioGoal1: number;
  ticketMedioGoal2: number;
  ticketMedioGoal3: number;
  ticketMedioGoal4: number;
  ticketMedioPrize1: number;
  ticketMedioPrize2: number;
  ticketMedioPrize3: number;
  ticketMedioPrize4: number;
}

export type Incentives = Record<string, IncentiveProjectionOutput | null>;

export interface Store {
    id: string;
    name: string;
    themeColor: string;
}

export interface AppState {
    stores: Store[];
    sellers: Record<string, Seller[]>;
    goals: Record<string, Goals>;
    incentives: Record<string, Incentives>;
}

const defaultGoals: Goals = {
  metaMinha: 8000,
  meta: 9000,
  metona: 10000,
  metaLendaria: 12000,
  legendariaBonusValorVenda: 2000,
  legendariaBonusValorPremio: 50,
  metaMinhaPrize: 50,
  metaPrize: 100,
  metonaPrize: 120,
  paGoal1: 1.5,
  paGoal2: 1.6,
  paGoal3: 1.9,
  paGoal4: 2.0,
  paPrize1: 5,
  paPrize2: 10,
  paPrize3: 15,
  paPrize4: 20,
  ticketMedioGoal1: 180,
  ticketMedioGoal2: 185,
  ticketMedioGoal3: 190,
  ticketMedioGoal4: 200,
  ticketMedioPrize1: 5,
  ticketMedioPrize2: 10,
  ticketMedioPrize3: 15,
  ticketMedioPrize4: 20,
};


export function getInitialState(): AppState {
    const store1Id = 'minha-primeira-loja';
    return {
        stores: [
            { id: store1Id, name: 'Minha Loja', themeColor: '#3b82f6' },
        ],
        sellers: {
            [store1Id]: [],
        },
        goals: {
            'default': defaultGoals,
            [store1Id]: defaultGoals,
        },
        incentives: {
            [store1Id]: {},
        },
    }
}

function mergeWithInitialState(savedState: AppState): AppState {
    const initialState = getInitialState();
    
    // If there are no stores, it's likely old state or fresh start, begin with initial.
    if (!savedState.stores || savedState.stores.length === 0) {
        return initialState;
    }
    
    // Ensure all entities have necessary fields
    savedState.stores.forEach(store => {
      if (!store.themeColor) {
        store.themeColor = '#3b82f6'; 
      }
      if (!savedState.sellers[store.id]) {
        savedState.sellers[store.id] = [];
      }
      if (!savedState.goals[store.id]) {
        savedState.goals[store.id] = defaultGoals;
      }
      if (!savedState.incentives[store.id]) {
        savedState.incentives[store.id] = {};
      }
    });

    Object.keys(savedState.sellers).forEach(storeId => {
      savedState.sellers[storeId].forEach(seller => {
        if (!seller.password) {
          seller.password = seller.name.toLowerCase();
        }
         if (!seller.avatarId) {
          seller.avatarId = `avatar${(Math.floor(Math.random() * 10) + 1)}`;
        }
      });
    });

    return savedState;
}


export function loadState(): AppState {
    if (typeof window === 'undefined') {
        return getInitialState();
    }
    try {
        const v2StateRaw = localStorage.getItem(LOCAL_STORAGE_KEY);

        if (v2StateRaw) {
            const parsed = JSON.parse(v2StateRaw) as AppState;
            if (parsed && parsed.stores && parsed.sellers) {
                return mergeWithInitialState(parsed);
            }
        }
        
        const initialState = getInitialState();
        saveState(initialState);
        return initialState;

    } catch (error) {
        console.error("Could not load state from localStorage", error);
        return getInitialState();
    }
}

export function saveState(state: AppState) {
    if (typeof window === 'undefined') {
        return;
    }
    try {
        const serializedState = JSON.stringify(state);
        localStorage.setItem(LOCAL_STORAGE_KEY, serializedState);
        window.dispatchEvent(new CustomEvent('storage_updated'));
    } catch (error) {
        console.error("Could not save state to localStorage", error);
    }
}


export function getAdminPassword(): string {
    if (typeof window === 'undefined') {
        return DEFAULT_ADMIN_PASSWORD;
    }
    return localStorage.getItem(ADMIN_PASSWORD_KEY) || DEFAULT_ADMIN_PASSWORD;
}

export function setAdminPassword(password: string) {
     if (typeof window === 'undefined') {
        return;
    }
    localStorage.setItem(ADMIN_PASSWORD_KEY, password);
}
```

---

### **4. Lógica de Cálculo (`src/ai/flows/incentive-projection.ts`)**

```typescript
'use server';

/**
 * @fileOverview This file defines a Genkit flow for projecting potential incentives
 * a salesperson can earn based on their current sales performance. It calculates
 * potential rewards for reaching different sales goals (Metinha, Meta, Metona, Legendaria, Corridinha Diaria).
 *
 * - incentiveProjection - A function that triggers the incentive projection flow.
 * - IncentiveProjectionInput - The input type for the incentiveProjection function.
 * - IncentiveProjectionOutput - The return type for the incentiveProjection function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const IncentiveProjectionInputSchema = z.object({
  vendas: z.number().describe('The current sales amount of the salesperson.'),
  metaMinha: z.number().describe('The Metinha sales goal.'),
  meta: z.number().describe('The Meta sales goal.'),
  metona: z.number().describe('The Metona sales goal.'),
  metaLendaria: z.number().describe('The Legendaria sales goal.'),
  metaMinhaPrize: z.number().describe('The Metinha prize.'),
  metaPrize: z.number().describe('The Meta prize.'),
  metonaPrize: z.number().describe('The Metona prize.'),
  legendariaBonusValorVenda: z.number().describe('The sales amount for the Legendaria bonus rule.'),
  legendariaBonusValorPremio: z.number().describe('The prize amount for the Legendaria bonus rule.'),
  pa: z.number().describe('Products per customer.'),
  paGoal1: z.number().describe('PA Goal 1.'),
  paGoal2: z.number().describe('PA Goal 2.'),
  paGoal3: z.number().describe('PA Goal 3.'),
  paGoal4: z.number().describe('PA Goal 4.'),
  paPrize1: z.number().describe('PA Prize 1.'),
  paPrize2: z.number().describe('PA Prize 2.'),
  paPrize3: z.number().describe('PA Prize 3.'),
  paPrize4: z.number().describe('PA Prize 4.'),
  ticketMedio: z.number().describe('Average ticket.'),
  ticketMedioGoal1: z.number().describe('Ticket Medio Goal 1.'),
  ticketMedioGoal2: z.number().describe('Ticket Medio Goal 2.'),
  ticketMedioGoal3: z.number().describe('Ticket Medio Goal 3.'),
  ticketMedioGoal4: z.number().describe('Ticket Medio Goal 4.'),
  ticketMedioPrize1: z.number().describe('Ticket Medio Prize 1.'),
  ticketMedioPrize2: z.number().describe('Ticket Medio Prize 2.'),
  ticketMedioPrize3: z.number().describe('Ticket Medio Prize 3.'),
  ticketMedioPrize4: z.number().describe('Ticket Medio Prize 4.'),
  corridinhaDiaria: z.number().describe('Daily sales target for Corridinha Diaria.'),
});
export type IncentiveProjectionInput = z.infer<typeof IncentiveProjectionInputSchema>;

const IncentiveProjectionOutputSchema = z.object({
  metinhaPremio: z.number().describe('Potential reward for reaching Metinha.'),
  metaPremio: z.number().describe('Potential reward for reaching Meta.'),
  metonaPremio: z.number().describe('Potential reward for reaching Metona.'),
  legendariaBonus: z.number().describe('Potential bonus for reaching Legendaria.'),
  paBonus: z.number().describe('Potential bonus for products per customer.'),
  ticketMedioBonus: z.number().describe('Potential bonus for average ticket.'),
  corridinhaDiariaBonus: z.number().describe('Potential bonus for Corridinha Diaria.'),
});
export type IncentiveProjectionOutput = z.infer<typeof IncentiveProjectionOutputSchema>;

export async function incentiveProjection(input: IncentiveProjectionInput): Promise<IncentiveProjectionOutput> {
  return incentiveProjectionFlow(input);
}

const incentiveProjectionFlow = ai.defineFlow(
  {
    name: 'incentiveProjectionFlow',
    inputSchema: IncentiveProjectionInputSchema,
    outputSchema: IncentiveProjectionOutputSchema,
  },
  async input => {
    let metinhaPremio = 0;
    let metaPremio = 0;
    let metonaPremio = 0;
    let legendariaBonus = 0;
    let paBonus = 0;
    let ticketMedioBonus = 0;
    
    // Calculate sales prize based on highest achieved tier
    if (input.vendas >= input.metaMinha) {
      metinhaPremio = input.metaMinhaPrize;
    }
    if (input.vendas >= input.meta) {
      metinhaPremio = 0; // Not cumulative
      metaPremio = input.metaPrize;
    }
    if (input.vendas >= input.metona) {
      metinhaPremio = 0;
      metaPremio = 0; // Not cumulative
      metonaPremio = input.metonaPrize;
    }

    // Legendaria bonus is an ADD-ON to the Metona prize
    if (input.vendas >= input.metaLendaria && input.legendariaBonusValorVenda > 0) {
      legendariaBonus = Math.floor((input.vendas - input.metona) / input.legendariaBonusValorVenda) * input.legendariaBonusValorPremio;
    }

    if (input.pa >= input.paGoal4) {
      paBonus = input.paPrize4;
    } else if (input.pa >= input.paGoal3) {
      paBonus = input.paPrize3;
    } else if (input.pa >= input.paGoal2) {
      paBonus = input.paPrize2;
    } else if (input.pa >= input.paGoal1) {
      paBonus = input.paPrize1;
    }


    if (input.ticketMedio >= input.ticketMedioGoal4) {
      ticketMedioBonus = input.ticketMedioPrize4;
    } else if (input.ticketMedio >= input.ticketMedioGoal3) {
      ticketMedioBonus = input.ticketMedioPrize3;
    } else if (input.ticketMedio >= input.ticketMedioGoal2) {
      ticketMedioBonus = input.ticketMedioPrize2;
    } else if (input.ticketMedio >= input.ticketMedioGoal1) {
      ticketMedioBonus = input.ticketMedioPrize1;
    }

    return {
      metinhaPremio,
      metaPremio,
      metonaPremio,
      legendariaBonus,
      paBonus,
      ticketMedioBonus,
      corridinhaDiariaBonus: input.corridinhaDiaria, // This is a direct bonus
    };
  }
);
```

---

### **5. Estilos (`globals.css` e `tailwind.config.ts`)**

#### **`tailwind.config.ts`**
```typescript
import type {Config} from 'tailwindcss';

export default {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      fontFamily: {
        body: ['Inter', '"PT Sans"', 'sans-serif'],
        headline: ['Poppins', '"PT Sans"', 'sans-serif'],
        code: ['monospace'],
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
        sidebar: {
          DEFAULT: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0',
          },
          to: {
            height: 'var(--radix-accordion-content-height)',
          },
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)',
          },
          to: {
            height: '0',
          },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
} satisfies Config;
```

#### **`src/app/globals.css`**
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: 'Inter', 'PT Sans', sans-serif;
}

h1, h2, h3, h4, h5, h6 {
    font-family: 'Poppins', 'PT Sans', sans-serif;
}

@layer base {
  :root {
    --background: 220 20% 97%; /* #f5f6fa - Cinza Neutro Claro */
    --foreground: 222 88% 12%;

    --card: 0 0% 100%;
    --card-foreground: 222 88% 12%;

    --popover: 0 0% 100%;
    --popover-foreground: 222 88% 12%;

    /* Rosa - #E35573 */
    --primary: 348 71% 61%; 
    --primary-foreground: 0 0% 100%;
    
    /* Azul - #5A6FAE */
    --secondary: 227 34% 52%;
    --secondary-foreground: 0 0% 100%;
    
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    
    /* Verde para Sucesso - #10B981 */
    --accent: 159 82% 42%;
    --accent-foreground: 0 0% 100%;
    
    /* Vermelho para Destrutivo/Erro - #EF4444 */
    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 348 71% 61%;
    
    --chart-1: 348 71% 61%; /* Rosa Primário */
    --chart-2: 227 34% 52%; /* Azul Secundário */
    --chart-3: 159 82% 42%; /* Verde Sucesso */
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    
    --radius: 0.5rem;
  }

  .dark {
    --background: 0 0% 23%; /* #3A3A3A - Cinza Neutro Escuro */
    --foreground: 210 40% 98%;
    
    --card: 222 88% 14%;
    --card-foreground: 210 40% 98%;
    
    --popover: 222 88% 12%;
    --popover-foreground: 210 40% 98%;
    
    --primary: 348 71% 71%;
    --primary-foreground: 0 0% 100%;

    --secondary: 227 34% 62%;
    --secondary-foreground: 0 0% 100%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 159 82% 52%;
    --accent-foreground: 0 0% 100%;
    
    --destructive: 0 62% 40%;
    --destructive-foreground: 0 0% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 348 71% 71%;
    
    --chart-1: 348 71% 71%;
    --chart-2: 227 34% 62%;
    --chart-3: 159 82% 52%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```

---

### **6. Páginas da Aplicação**

#### **`src/app/layout.tsx`**
```typescript
import type {Metadata} from 'next';
import './globals.css';
import { Toaster } from "@/components/ui/toaster"
import ClientOnly from '@/components/client-only';

export const metadata: Metadata = {
  title: 'Corridinha GT',
  description: 'Generated by Firebase Studio',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&family=Inter:wght@400;500&display=swap" rel="stylesheet" />
      </head>
      <body className="font-body antialiased">
        {children}
        <ClientOnly>
          <Toaster />
        </ClientOnly>
      </body>
    </html>
  );
}
```

#### **`src/app/page.tsx` (Página Inicial)**
```typescript
"use client";

import Link from "next/link";
import { Button } from "@/components/ui/button";
import { ArrowRight, Store as StoreIcon, Lock, Loader2, FolderOpen } from "lucide-react";
import { useEffect, useState } from "react";
import { AppState, loadState } from "@/lib/storage";
import { motion } from "framer-motion";

export default function Home() {
  const [state, setState] = useState<AppState | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadedState = loadState();
    setState(loadedState);
    setLoading(false);
  }, []);

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-background">
        <Loader2 className="h-16 w-16 animate-spin text-primary" />
        <p className="mt-4 text-muted-foreground">Carregando...</p>
      </div>
    );
  }

  return (
    <main className="flex flex-col items-center justify-center min-h-screen bg-neutral-light p-6">
      <motion.div 
        className="flex flex-col items-center gap-8 max-w-4xl w-full"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >

        {/* Título */}
        <div className="text-center space-y-2">
          <h1 className="text-4xl font-extrabold text-neutral-dark drop-shadow-sm">
            Bem-vindo à <span className="text-primary">Supermoda</span> 🚀
          </h1>
          <p className="text-lg text-neutral-dark/80 max-w-xl mx-auto">
            Acompanhe suas vendas e impulsione resultados com mais estilo.
          </p>
        </div>

        {/* Card */}
        <motion.div
          className="w-full max-w-lg backdrop-blur-md bg-white/80 p-8 rounded-3xl shadow-xl border border-gray-200 mt-4"
          initial={{ opacity: 0, y: 40 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.3 }}
        >
          <h2 className="text-center text-xl font-semibold text-neutral-dark mb-6">
            Selecione sua loja para começar
          </h2>

          {!state || state.stores.length === 0 ? (
            <div className="flex flex-col items-center text-gray-500 py-6 text-center">
              <FolderOpen className="h-12 w-12 mb-4 text-gray-400" />
              <p className="font-medium text-lg">Nenhuma loja encontrada</p>
              <p className="text-sm mt-1 text-gray-400 max-w-xs">
                O administrador precisa adicionar uma loja no painel global para começar.
              </p>
            </div>
          ) : (
            <div className="grid grid-cols-1 gap-4">
              {state.stores.map((store) => (
                <Button
                  asChild
                  size="lg"
                  key={store.id}
                  className="justify-start h-auto py-4 px-5 rounded-xl border border-gray-200 
                            bg-gradient-to-r from-primary/90 to-secondary/90 text-white
                            hover:from-primary hover:to-secondary transition-all 
                            shadow-sm hover:shadow-lg hover:-translate-y-1 group"
                >
                  <Link href={`/loja/${store.id}`} className="flex items-center gap-4 w-full">
                    <div className="w-10 h-10 rounded-lg flex items-center justify-center bg-white/20">
                      <StoreIcon className="h-5 w-5 text-white" />
                    </div>
                    <span className="font-semibold text-base flex-grow text-left">
                      {store.name}
                    </span>
                    <ArrowRight className="ml-auto h-5 w-5 text-white/70 group-hover:text-white transition-colors" />
                  </Link>
                </Button>
              ))}
            </div>
          )}
        </motion.div>

        {/* Admin */}
        <div className="text-center mt-6">
          <Button
            variant="ghost"
            asChild
            className="text-sm text-gray-600 hover:text-primary transition-colors flex items-center gap-2"
          >
            <Link href="/login?redirect=/admin">
              <Lock className="h-4 w-4" />
              Acesso Restrito de Administrador
            </Link>
          </Button>
        </div>
      </motion.div>
    </main>
  );
}
```

#### **`src/app/loja/[storeId]/page.tsx`**
```typescript
"use client";

import Link from "next/link";
import { Button } from "@/components/ui/button";
import { ArrowRight, Home, Shield, Loader2 } from "lucide-react";
import { useEffect, useState, useCallback } from "react";
import { SellerAvatar } from "@/components/seller-avatar";
import { useParams, useRouter } from 'next/navigation';
import { loadState, Seller } from "@/lib/storage";
import { useToast } from "@/hooks/use-toast";

export default function StoreHomePage() {
  const [sellers, setSellers] = useState<Seller[]>([]);
  const [storeName, setStoreName] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  const params = useParams();
  const router = useRouter();
  const { toast } = useToast();
  const storeId = params.storeId as string;

  const loadStoreData = useCallback(() => {
    if (!storeId) {
      setError("ID da loja não encontrado na URL.");
      setLoading(false);
      return;
    };

    try {
        const decodedStoreId = decodeURIComponent(storeId);
        const savedState = loadState();
        const store = savedState.stores.find(s => s.id === decodedStoreId);
        
        if (store) {
            setStoreName(store.name);
            setSellers(savedState.sellers[decodedStoreId] || []);
            setError(null); // Clear previous errors if found
        } else {
            setError(`Loja com ID "${decodedStoreId}" não foi encontrada.`);
            toast({
              variant: "destructive",
              title: "Erro ao carregar",
              description: `A loja que você está tentando acessar não foi encontrada.`,
            });
        }
    } catch (e) {
        console.error("Failed to load state from localStorage", e);
        setError("Ocorreu um erro ao carregar os dados da loja.");
    } finally {
        setLoading(false);
    }
  }, [storeId, toast]);

  useEffect(() => {
    loadStoreData();

    // Listen for custom storage events
    const handleStorageUpdate = () => {
      console.log('Storage updated, reloading store data...');
      loadStoreData();
    };

    window.addEventListener('storage_updated', handleStorageUpdate);

    return () => {
      window.removeEventListener('storage_updated', handleStorageUpdate);
    };
  }, [loadStoreData]);

  const handleAdminAccess = () => {
    const isAdmin = sessionStorage.getItem('adminAuthenticated') === 'true';
    const destination = `/dashboard/${storeId}?tab=admin`;
    if (isAdmin) {
      router.push(destination);
    } else {
      router.push(`/login?redirect=${encodeURIComponent(destination)}`);
    }
  };

  const handleSellerAccess = (sellerId: string) => {
    const isSellerAuthenticated = sessionStorage.getItem(`sellerAuthenticated-${sellerId}`) === 'true';
    const destination = `/dashboard/${storeId}?tab=${sellerId}`;

    if (isSellerAuthenticated) {
      router.push(destination);
    } else {
      router.push(`/login/vendedor?storeId=${storeId}&sellerId=${sellerId}&redirect=${encodeURIComponent(destination)}`);
    }
  };

  if (loading) {
    return (
        <div className="flex flex-col items-center justify-center min-h-screen">
            <Loader2 className="mr-2 h-16 w-16 animate-spin text-primary" />
            <p className="mt-4 text-muted-foreground">Carregando dados da loja...</p>
        </div>
    )
  }

  return (
    <main className="flex flex-col items-center justify-center min-h-screen bg-neutral-light p-8 relative">
       <div className="absolute top-4 left-4">
            <Button asChild variant="outline">
                <Link href="/">
                    <Home className="mr-2 h-4 w-4" />
                    Todas as Lojas
                </Link>
            </Button>
        </div>
      <div className="flex flex-col items-center gap-6 max-w-4xl w-full">
        <h1 className="text-5xl font-extrabold text-neutral-dark tracking-wide text-center">
          {error ? "Erro" : storeName}
        </h1>

        {error && (
            <p className="text-xl text-destructive text-center">{error}</p>
        )}
        
        {!loading && !error && (
            <>
                <p className="text-xl text-muted-foreground text-center">
                Selecione seu usuário para começar.
                </p>
                <div className="w-full max-w-md bg-white p-6 rounded-2xl shadow-lg mt-8 border border-gray-200">
                    <h2 className="text-center text-lg font-semibold text-gray-700 mb-6">Acessar Painel</h2>
                    <div className="grid grid-cols-1 gap-4">
                        <Button size="lg" variant="default" className="justify-start h-auto py-3 rounded-lg bg-gradient-to-r from-red-600 to-yellow-500 text-white font-semibold transition-transform transform hover:scale-105" onClick={handleAdminAccess}>
                        <div className="flex items-center gap-4 w-full">
                            <Shield className="h-6 w-6" />
                            <div className="flex flex-col items-start">
                            <span className="font-semibold text-base">Administrador</span>
                            <span className="text-sm opacity-90 font-normal">Ver painel de controle</span>
                            </div>
                            <ArrowRight className="ml-auto h-5 w-5" />
                        </div>
                        </Button>
                        {sellers.map((seller) => (
                        <Button 
                            size="lg" 
                            variant="outline" 
                            key={seller.id} 
                            className="justify-start h-auto py-3 rounded-lg transition-transform transform hover:scale-105 hover:bg-gray-50"
                            onClick={() => handleSellerAccess(seller.id)}
                        >
                            <div className="flex items-center gap-4 w-full">
                                <SellerAvatar avatarId={seller.avatarId} className="h-10 w-10" />
                                <div className="flex flex-col items-start">
                                    <span className="font-semibold text-base text-gray-800">{seller.name}</span>
                                    <span className="text-sm text-muted-foreground font-normal">Ver meu desempenho</span>
                                </div>
                                <ArrowRight className="ml-auto h-5 w-5 text-gray-400" />
                            </div>
                        </Button>
                        ))}
                    </div>
                </div>
            </>
        )}
      </div>
    </main>
  );
}
```

#### **`src/app/admin/page.tsx`**
```typescript
"use client";

import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { KeyRound, Trash2, Home, ArrowRight, LogOut, Loader2, Edit, Save, X, LineChart, Palette } from "lucide-react";
import { useEffect, useState, useCallback } from "react";
import { AppState, loadState, saveState, Store, setAdminPassword, getInitialState, Seller, Goals } from "@/lib/storage";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { useToast } from "@/hooks/use-toast";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import Link from "next/link";


export default function AdminPage() {
  const [state, setState] = useState<AppState | null>(null);
  const [loading, setLoading] = useState(true);
  const [newStoreName, setNewStoreName] = useState("");
  
  const [adminPasswords, setAdminPasswords] = useState({ new: '', confirm: ''});
  const [editingStoreId, setEditingStoreId] = useState<string | null>(null);
  const [editingStore, setEditingStore] = useState<{name: string, themeColor: string}>({ name: '', themeColor: '#3b82f6'});

  const { toast } = useToast();
  const router = useRouter();


  useEffect(() => {
    const isAdmin = sessionStorage.getItem('adminAuthenticated') === 'true';
    if (!isAdmin) {
      router.push('/login?redirect=/admin');
    } else {
      setState(loadState());
      setLoading(false);
    }
  }, [router]);

  const handleAddStore = () => {
    if (!newStoreName.trim()) {
       setTimeout(() => {
        toast({ variant: "destructive", title: "Erro", description: "O nome da loja não pode estar vazio." });
      }, 0);
      return;
    }

    setState(currentState => {
      if (!currentState) return null;

      const newStoreId = crypto.randomUUID();
      const newStore: Store = { id: newStoreId, name: newStoreName, themeColor: '#3b82f6' };
      
      const newState: AppState = {
        ...currentState,
        stores: [...currentState.stores, newStore],
        sellers: { ...currentState.sellers, [newStoreId]: [] as Seller[] },
        goals: { ...currentState.goals, [newStoreId]: currentState.goals.default || getInitialState().goals.default as Goals },
        incentives: { ...currentState.incentives, [newStoreId]: {} }
      };

      saveState(newState);
       setTimeout(() => {
          toast({ title: "Sucesso!", description: `Loja "${newStore.name}" adicionada.` });
       }, 0);
      
      setNewStoreName("");
      
      return newState;
    });
  };

  const handleRemoveStore = (id: string) => {
    const currentState = state;
    if (!currentState) return;

    if (currentState.stores.length <= 1) {
        setTimeout(() => {
            toast({ variant: "destructive", title: "Ação não permitida", description: "Não é possível remover a última loja." });
        }, 0);
        return;
    }

    const storeToRemove = currentState.stores.find(s => s.id === id);
    const newState: AppState = { ...currentState };
    newState.stores = currentState.stores.filter(s => s.id !== id);
    delete newState.sellers[id];
    delete newState.goals[id];
    delete newState.incentives[id];
    
    saveState(newState);
    setState(newState);
    
    if (storeToRemove) {
      setTimeout(() => {
        toast({ title: "Loja removida", description: `A loja "${storeToRemove.name}" foi removida.` });
      }, 0);
    }
  };

  const handleStartEditingStore = (store: Store) => {
    setEditingStoreId(store.id);
    setEditingStore({ name: store.name, themeColor: store.themeColor || '#3b82f6' });
  };

  const handleCancelEditingStore = () => {
    setEditingStoreId(null);
    setEditingStore({ name: '', themeColor: '#3b82f6' });
  };

  const handleSaveStore = (id: string) => {
    if (!editingStore.name.trim()) {
      setTimeout(() => {
        toast({ variant: "destructive", title: "Erro", description: "O nome da loja não pode estar vazio." });
      }, 0);
      return;
    }
    setState(currentState => {
      if (!currentState) return null;
      const newState = {
        ...currentState,
        stores: currentState.stores.map(store => 
          store.id === id ? { ...store, name: editingStore.name, themeColor: editingStore.themeColor } : store
        )
      };
      saveState(newState);
      setTimeout(() => {
        toast({ title: "Sucesso!", description: `Loja "${editingStore.name}" atualizada.` });
      }, 0);
      return newState;
    });
    handleCancelEditingStore();
  };


  const handleChangePassword = () => {
    if (adminPasswords.new.length < 4) {
      setTimeout(() => {
        toast({ variant: "destructive", title: "Senha muito curta", description: "A senha deve ter pelo menos 4 caracteres." });
      }, 0);
      return;
    }
     if (adminPasswords.new !== adminPasswords.confirm) {
      setTimeout(() => {
        toast({ variant: "destructive", title: "Senhas não conferem", description: "As senhas digitadas não são iguais." });
      }, 0);
      return;
    }
    setAdminPassword(adminPasswords.new);
    setAdminPasswords({ new: '', confirm: ''});
    setTimeout(() => {
      toast({ title: "Sucesso!", description: "Sua senha de administrador foi alterada." });
    }, 0);
  };

  const handleLogout = () => {
    sessionStorage.removeItem('adminAuthenticated');
    setTimeout(() => {
      toast({
          title: 'Saída segura!',
          description: 'Você saiu do modo de administrador.',
      });
    }, 0);
    router.push('/');
  }


  if (loading) {
      return (
          <div className="flex flex-col items-center justify-center min-h-screen">
              <Loader2 className="mr-2 h-16 w-16 animate-spin text-primary" />
              <p className="mt-4 text-muted-foreground">Carregando painel de administrador...</p>
          </div>
      )
  }

  return (
    <main className="flex flex-col items-center min-h-screen bg-background p-4 sm:p-8 relative">
      <div className="absolute top-4 left-4">
            <Button asChild variant="outline">
                <Link href="/">
                    <Home className="mr-2 h-4 w-4" />
                    Página Inicial
                </Link>
            </Button>
        </div>
      <div className="flex flex-col items-center gap-6 w-full max-w-4xl">
        <h1 className="text-4xl font-bold font-headline text-primary text-center mt-12">
            Painel Administrativo Global
        </h1>
        <p className="text-lg text-muted-foreground text-center">
            Gerencie todas as lojas e configurações do sistema aqui.
        </p>

        <Card className="w-full">
          <CardHeader>
            <CardTitle className="text-xl">Visão Geral</CardTitle>
            <CardDescription>Acesse o dashboard com dados consolidados de todas as lojas.</CardDescription>
          </CardHeader>
          <CardContent>
            <Button asChild>
              <Link href="/admin/dashboard">
                <LineChart className="mr-2 h-4 w-4"/>
                Acessar Dashboard Geral
              </Link>
            </Button>
          </CardContent>
        </Card>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 w-full mt-8">
            <Card>
                <CardHeader>
                    <CardTitle className="text-xl">Gerenciar Lojas</CardTitle>
                    <CardDescription>Adicione, renomeie e defina um tema para cada loja.</CardDescription>
                </CardHeader>
                <CardContent>
                <div className="space-y-2 mb-4">
                    <Label htmlFor="new-store">Adicionar Nova Loja</Label>
                    <div className="flex items-center gap-2">
                        <Input 
                        id="new-store"
                        placeholder="Ex: SUPERMODA ITABUNA" 
                        value={newStoreName}
                        onChange={(e) => setNewStoreName(e.target.value)}
                        onKeyDown={(e) => e.key === 'Enter' && handleAddStore()}
                        />
                    <Button type="button" onClick={handleAddStore}>Adicionar</Button>
                    </div>
                </div>
                <Separator className="my-4"/>
                <Label>Lojas Atuais</Label>
                <div className="space-y-2 mt-2 max-h-60 overflow-y-auto pr-2">
                    {state?.stores.map((store) => (
                        <div key={store.id} className="flex items-center justify-between gap-2 p-2 rounded-md bg-muted/50">
                            {editingStoreId === store.id ? (
                              <>
                                <Input 
                                  value={editingStore.name}
                                  onChange={(e) => setEditingStore(s => ({...s, name: e.target.value}))}
                                  onKeyDown={(e) => e.key === 'Enter' && handleSaveStore(store.id)}
                                  autoFocus
                                  className="h-8"
                                />
                                <div className='relative'>
                                    <Palette className="h-4 w-4 absolute left-2 top-1/2 -translate-y-1/2"/>
                                    <Input
                                        type="color"
                                        value={editingStore.themeColor}
                                        onChange={(e) => setEditingStore(s => ({...s, themeColor: e.target.value}))}
                                        className="h-8 w-16 p-1 pl-7"
                                    />
                                </div>
                                <Button size="icon" variant="ghost" onClick={() => handleSaveStore(store.id)}><Save className="h-4 w-4 text-green-600"/></Button>
                                <Button size="icon" variant="ghost" onClick={handleCancelEditingStore}><X className="h-4 w-4"/></Button>
                              </>
                            ) : (
                              <>
                                <div className="flex items-center gap-2">
                                    <div className="w-4 h-4 rounded-full" style={{backgroundColor: store.themeColor}}></div>
                                    <span className="font-medium">{store.name}</span>
                                </div>
                                <div className="flex items-center">
                                    <Button asChild variant="ghost" size="sm">
                                      <Link href={`/loja/${store.id}`}>
                                        Ir para Loja <ArrowRight className="ml-2 h-4 w-4"/>
                                      </Link>
                                    </Button>
                                    <Button size="icon" variant="ghost" onClick={() => handleStartEditingStore(store)}><Edit className="h-4 w-4"/></Button>
                                    <AlertDialog><AlertDialogTrigger asChild><Button size="icon" variant="ghost" className="text-destructive hover:text-destructive"><Trash2 className="h-4 w-4"/></Button></AlertDialogTrigger>
                                        <AlertDialogContent>
                                        <AlertDialogHeader><AlertDialogTitle>Você tem certeza?</AlertDialogTitle><AlertDialogDescription>Essa ação não pode ser desfeita. Isso irá remover permanentemente a loja e todos os seus dados.</AlertDialogDescription></AlertDialogHeader>
                                        <AlertDialogFooter><AlertDialogCancel>Cancelar</AlertDialogCancel><AlertDialogAction onClick={() => handleRemoveStore(store.id)} className="bg-destructive hover:bg-destructive/90">Remover</AlertDialogAction></AlertDialogFooter>
                                        </AlertDialogContent>
                                    </AlertDialog>
                                </div>
                              </>
                            )}
                        </div>
                    ))}
                </div>
                </CardContent>
            </Card>
            <Card>
                <CardHeader>
                    <CardTitle className="text-xl">Segurança</CardTitle>
                    <CardDescription>Altere a senha de acesso ao painel de administrador.</CardDescription>
                </CardHeader>
                <CardContent>
                <div className="space-y-4">
                    <div className="space-y-2">
                        <Label htmlFor="new-password">Nova Senha</Label>
                        <Input 
                            id="new-password"
                            type="password" 
                            placeholder="Pelo menos 4 caracteres"
                            value={adminPasswords.new}
                            onChange={(e) => setAdminPasswords(p => ({...p, new: e.target.value}))}
                        />
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="confirm-password">Confirmar Nova Senha</Label>
                        <Input 
                            id="confirm-password"
                            type="password" 
                            placeholder="Repita a senha"
                            value={adminPasswords.confirm}
                            onChange={(e) => setAdminPasswords(p => ({...p, confirm: e.target.value}))}
                            onKeyDown={(e) => e.key === 'Enter' && handleChangePassword()}
                        />
                    </div>
                </div>
                <Button onClick={handleChangePassword} className="w-full mt-4"><KeyRound/> Alterar Senha</Button>
                </CardContent>
            </Card>
        </div>
        
        <div className="text-center mt-8">
            <Button variant="link" onClick={handleLogout} className="text-sm text-muted-foreground hover:text-primary transition-colors flex items-center gap-2">
                <LogOut className="h-4 w-4" />
                Sair do Modo Administrador
            </Button>
        </div>
      </div>
    </main>
  );
}
```

---

### **7. Componentes Principais**

#### **`src/components/goal-getter-dashboard.tsx`**
```typescript
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { useState, useTransition, useEffect, useCallback } from "react";
import Link from "next/link";
import { useSearchParams, useRouter } from 'next/navigation';
import {
  ShieldCheck,
  Home,
} from "lucide-react";

import {
  incentiveProjection,
  type IncentiveProjectionOutput,
} from "@/ai/flows/incentive-projection";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";

import { useToast } from "@/hooks/use-toast";

import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { loadState, saveState, Seller, Incentives, getInitialState, Goals, Store } from "@/lib/storage";
import { AdminTab } from "@/components/admin-tab";
import { SellerTab } from "@/components/seller-tab";


const sellerSchema = z.object({
  id: z.string(),
  name: z.string().min(1, "Nome é obrigatório"),
  password: z.string().min(4, "A senha deve ter pelo menos 4 caracteres"),
  avatarId: z.string(),
  vendas: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0).default(0),
  pa: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0).default(0),
  ticketMedio: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0).default(0),
  corridinhaDiaria: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0).default(0),
});

export const formSchema = z.object({
  newSellerName: z.string(),
  newSellerPassword: z.string(),
  goals: z.object({
    metaMinha: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    meta: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    metona: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    metaLendaria: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    legendariaBonusValorVenda: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(1, "Deve ser maior que zero"),
    legendariaBonusValorPremio: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    metaMinhaPrize: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    metaPrize: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    metonaPrize: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    paGoal1: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    paGoal2: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    paGoal3: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    paGoal4: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    paPrize1: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    paPrize2: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    paPrize3: z.coerce.number({ invalid_type_error: "Deve be um número" }).min(0),
    paPrize4: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    ticketMedioGoal1: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    ticketMedioGoal2: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    ticketMedioGoal3: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    ticketMedioGoal4: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    ticketMedioPrize1: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    ticketMedioPrize2: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    ticketMedioPrize3: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
    ticketMedioPrize4: z.coerce.number({ invalid_type_error: "Deve ser um número" }).min(0),
  }),
  sellers: z.array(sellerSchema),
});

export type FormValues = z.infer<typeof formSchema>;
export type RankingMetric = 'vendas' | 'pa' | 'ticketMedio' | 'corridinhaDiaria';
export type Rankings = Record<string, Record<RankingMetric, number>>;

export function GoalGetterDashboard({ storeId }: { storeId: string }) {
  const [isPending, startTransition] = useTransition();
  const { toast } = useToast();
  const [incentives, setIncentives] = useState<Incentives>({});
  const [rankings, setRankings] = useState<Rankings>({});
  const [isAdmin, setIsAdmin] = useState(false);
  const [loggedInSellerId, setLoggedInSellerId] = useState<string | null>(null);
  const [currentStore, setCurrentStore] = useState<Store | null>(null);
  const searchParams = useSearchParams();
  const router = useRouter();

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: getInitialStateForForm(),
  });
  
  function getInitialStateForForm(): FormValues {
      const state = loadState();
      return {
        newSellerName: "",
        newSellerPassword: "",
        goals: state.goals[storeId] || state.goals.default,
        sellers: state.sellers[storeId] || [],
      }
  }

  const { watch, reset, formState: { isDirty } } = form;
  const currentValues = watch();

  const [activeTab, setActiveTab] = useState(() => {
    const tabFromUrl = searchParams.get('tab');
    if (tabFromUrl) return tabFromUrl;

    const state = loadState();
    const sellers = state.sellers[storeId] || [];
    return sellers?.[0]?.id ?? 'admin';
  });

  const calculateRankings = useCallback((sellers: Seller[], currentIncentives: Record<string, IncentiveProjectionOutput | null>) => {
    const newRankings: Rankings = {};
    if (!sellers || sellers.length === 0) {
        setRankings({});
        return;
    }
    const metrics: RankingMetric[] = ['vendas', 'pa', 'ticketMedio', 'corridinhaDiaria'];

    metrics.forEach(metric => {
        const sortedSellers = [...sellers]
            .map(seller => {
                let value = 0;
                if (metric === 'corridinhaDiaria') {
                    const incentiveData = currentIncentives[seller.id];
                    value = incentiveData?.corridinhaDiariaBonus || 0;
                }
                else {
                    value = seller[metric as keyof Omit<Seller, 'id' | 'name' | 'avatarId' | 'password'>] as number;
                }
                return { id: seller.id, value };
            })
            .sort((a, b) => b.value - a.value);

        let rank = 1;
        for (let i = 0; i < sortedSellers.length; i++) {
            if (i > 0 && sortedSellers[i].value < sortedSellers[i - 1].value) {
                rank = i + 1;
            }
            const sellerId = sortedSellers[i].id;
            if (!newRankings[sellerId]) {
                newRankings[sellerId] = {} as Record<RankingMetric, number>;
            }
            newRankings[sellerId][metric] = rank;
        }
    });

    setRankings(newRankings);
  }, []);

  const loadDataForStore = useCallback(() => {
    try {
      const state = loadState();
      const store = state.stores.find(s => s.id === storeId);
      if (!store) {
        setTimeout(() => toast({ variant: "destructive", title: "Erro", description: "Loja não encontrada." }), 0);
        router.push('/');
        return;
      }
       setCurrentStore(store);
      if (store.themeColor) {
        document.documentElement.style.setProperty('--primary', '195 89% 52%');
      }
      
      const storeSellers = state.sellers[storeId] || [];
      const storeGoals = state.goals[storeId] || state.goals.default;
      const storeIncentives = state.incentives[storeId] || {};

      reset({
        ...form.getValues(),
        sellers: storeSellers,
        goals: storeGoals,
      });

      setIncentives(storeIncentives);
      calculateRankings(storeSellers, storeIncentives);

    } catch (error) {
        console.error("Failed to load state from localStorage", error);
    }
  }, [storeId, reset, router, calculateRankings, toast, form]);
  
  useEffect(() => {
      loadDataForStore();
  }, [loadDataForStore]);

  // Auth and Tab logic
  useEffect(() => {
    const adminAuthenticated = sessionStorage.getItem('adminAuthenticated') === 'true';
    setIsAdmin(adminAuthenticated);

    const state = loadState();
    const tabFromUrl = searchParams.get('tab');
    let currentLoggedInSeller: string | null = null;

    if (!adminAuthenticated) {
        (state.sellers[storeId] || []).forEach(seller => {
            if(sessionStorage.getItem(`sellerAuthenticated-${seller.id}`) === 'true') {
                currentLoggedInSeller = seller.id;
            }
        });
        setLoggedInSellerId(currentLoggedInSeller);
    }

    const tabToActivate = tabFromUrl || (state.sellers[storeId]?.[0]?.id ?? 'admin');
    
    const sellerIsAuthenticated = (sellerId: string) => {
        return sessionStorage.getItem(`sellerAuthenticated-${sellerId}`) === 'true';
    }

    if (tabToActivate === 'admin') {
        if (!adminAuthenticated) {
            const destination = `/dashboard/${storeId}?tab=admin`;
            router.push(`/login?redirect=${encodeURIComponent(destination)}`);
            return;
        }
    } else { // It's a seller tab
        if (!adminAuthenticated && !sellerIsAuthenticated(tabToActivate)) {
            const destination = `/dashboard/${storeId}?tab=${tabToActivate}`;
            router.push(`/login/vendedor?storeId=${storeId}&sellerId=${tabToActivate}&redirect=${encodeURIComponent(destination)}`);
            return;
        }
        if (!adminAuthenticated && currentLoggedInSeller && tabToActivate !== currentLoggedInSeller) {
            toast({ variant: 'destructive', title: 'Acesso Negado', description: 'Você só pode ver seu próprio painel.' });
            router.push(`/dashboard/${storeId}?tab=${currentLoggedInSeller}`);
            return;
        }
    }
    
    if (tabToActivate !== activeTab) {
        setActiveTab(tabToActivate);
    }
  }, [storeId, router, toast, searchParams, activeTab]);

  // Save state on change
  useEffect(() => {
    if (!isDirty) return;
    
    const subscription = watch((value) => {
        try {
            const state = loadState();
            state.sellers[storeId] = value.sellers || [];
            state.goals[storeId] = value.goals as Goals;
            state.incentives[storeId] = incentives;
            saveState(state);
            if(value.sellers && incentives){
                 calculateRankings(value.sellers, incentives);
            }
        } catch(error) {
            console.error("Failed to save state to localStorage", error);
        }
    });
    return () => subscription.unsubscribe();
  }, [watch, incentives, storeId, calculateRankings, isDirty]);


  const handleTabChange = (newTab: string) => {
      if (!isAdmin && loggedInSellerId && newTab !== loggedInSellerId) {
          toast({ variant: 'destructive', title: 'Acesso Negado', description: 'Você só pode acessar o seu painel.' });
          router.push(`/dashboard/${storeId}?tab=${loggedInSellerId}`);
          return;
      }
       if (newTab === 'admin' && !isAdmin) {
          toast({ variant: 'destructive', title: 'Acesso Negado', description: 'Você precisa ser um administrador.'})
          const destination = `/dashboard/${storeId}?tab=admin`;
          router.push(`/login?redirect=${encodeURIComponent(destination)}`);
          return;
      }
      
      const sellerIsAuthenticated = (sellerId: string) => {
        return sessionStorage.getItem(`sellerAuthenticated-${sellerId}`) === 'true';
      }

      if(newTab !== 'admin' && !isAdmin && !sellerIsAuthenticated(newTab)){
        const destination = `/dashboard/${storeId}?tab=${newTab}`;
        router.push(`/login/vendedor?storeId=${storeId}&sellerId=${newTab}&redirect=${encodeURIComponent(destination)}`);
        return;
      }

      setActiveTab(newTab);
      router.push(`/dashboard/${storeId}?tab=${newTab}`, { scroll: false });
  }

  const calculateAllIncentives = (values: FormValues) => {
    startTransition(async () => {
      try {
        const newIncentives: Record<string, IncentiveProjectionOutput | null> = {};
        for (const seller of values.sellers) {
          const result = await incentiveProjection({
            vendas: seller.vendas, pa: seller.pa, ticketMedio: seller.ticketMedio, corridinhaDiaria: seller.corridinhaDiaria,
            metaMinha: values.goals.metaMinha, meta: values.goals.meta, metona: values.goals.metona,
            metaLendaria: values.goals.metaLendaria, legendariaBonusValorVenda: values.goals.legendariaBonusValorVenda,
            legendariaBonusValorPremio: values.goals.legendariaBonusValorPremio, metaMinhaPrize: values.goals.metaMinhaPrize,
            metaPrize: values.goals.metaPrize, metonaPrize: values.goals.metonaPrize, paGoal1: values.goals.paGoal1,
            paGoal2: values.goals.paGoal2, paGoal3: values.goals.paGoal3, paGoal4: values.goals.paGoal4,
            paPrize1: values.goals.paPrize1, paPrize2: values.goals.paPrize2, paPrize3: values.goals.paPrize3,
            paPrize4: values.goals.paPrize4, ticketMedioGoal1: values.goals.ticketMedioGoal1,
            ticketMedioGoal2: values.goals.ticketMedioGoal2, ticketMedioGoal3: values.goals.ticketMedioGoal3,
            ticketMedioGoal4: values.goals.ticketMedioGoal4, ticketMedioPrize1: values.goals.ticketMedioPrize1,
            ticketMedioPrize2: values.goals.ticketMedioPrize2, ticketMedioPrize3: values.goals.ticketMedioPrize3,
            ticketMedioPrize4: values.goals.ticketMedioPrize4,
          });
          newIncentives[seller.id] = result;
        }
        setIncentives(newIncentives);
        calculateRankings(values.sellers, newIncentives);
        toast({ title: "Sucesso!", description: "Painel de todos os vendedores atualizado com sucesso." });
      } catch (error) {
        console.error("Calculation Error:", error);
        toast({ variant: "destructive", title: "Erro de Cálculo", description: "Não foi possível calcular os incentivos. Tente novamente." });
      }
    });
  };

  const onSubmit = (values: FormValues) => calculateAllIncentives(values);
  
  const visibleSellers = isAdmin ? (currentValues.sellers || []) : (currentValues.sellers || []).filter(s => s.id === loggedInSellerId);

  return (
    <div className="container mx-auto p-4 py-8 md:p-8 relative">
      <header className="flex flex-wrap items-center justify-between gap-4 mb-8">
        <div className="flex items-center gap-4">
            <div>
              <h1 className="text-3xl font-bold font-headline" style={{color: currentStore?.themeColor}}>
                {currentStore?.name || 'Carregando...'}
              </h1>
              <p className="text-muted-foreground">
                Acompanhe as metas e os ganhos da equipe.
              </p>
            </div>
        </div>
        <div className="flex items-center gap-2">
          <Button asChild variant="outline">
            <Link href="/">
              <Home className="mr-2 h-4 w-4" />
              Todas as Lojas
            </Link>
          </Button>
          {isAdmin && (
            <Button asChild variant="outline">
                <Link href="/admin">
                    <ShieldCheck className="mr-2 h-4 w-4" />
                    Admin Global
                </Link>
            </Button>
          )}
        </div>
      </header>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
           <TooltipProvider>
            <Tabs value={activeTab} onValueChange={handleTabChange} className="w-full">
                <div className="flex items-center border-b">
                    <TabsList className="flex-grow h-auto p-0 bg-transparent border-0 rounded-none">
                        {visibleSellers.map(seller => (
                             <TabsTrigger key={seller.id} value={seller.id} className="rounded-lg px-3 py-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-rose-500 data-[state=active]:to-pink-600 data-[state=active]:text-white data-[state=active]:shadow-md">
                                {seller.name}
                            </TabsTrigger>
                        ))}
                    </TabsList>
                    {isAdmin && (
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <TabsList className="h-auto p-0 bg-transparent border-0 rounded-none">
                                    <TabsTrigger value="admin" className="rounded-lg px-3 py-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-indigo-500 data-[state=active]:to-violet-600 data-[state=active]:text-white data-[state=active]:shadow-md">
                                        <ShieldCheck className="h-5 w-5"/>
                                        <span className="sr-only">Admin</span>
                                    </TabsTrigger>
                                </TabsList>
                            </TooltipTrigger>
                            <TooltipContent>
                                <p>Painel do Administrador da Loja</p>
                            </TooltipContent>
                        </Tooltip>
                    )}
                </div>

                {isAdmin && (
                    <TabsContent value="admin">
                        <AdminTab form={form} storeId={storeId} setIncentives={setIncentives} />
                    </TabsContent>
                )}
                
                {(currentValues.sellers || []).map((seller, index) => (
                    <TabsContent key={seller.id} value={seller.id} className="mt-4">
                        <SellerTab
                            seller={seller}
                            goals={currentValues.goals}
                            incentives={incentives[seller.id]}
                            rankings={rankings[seller.id]}
                            loading={isPending}
                            themeColor={currentStore?.themeColor}
                        />
                    </TabsContent>
                ))}

                {currentValues.sellers && currentValues.sellers.length === 0 && activeTab !== 'admin' && (
                    <TabsContent value={activeTab} className="mt-4">
                        <p>Sem vendedores</p>
                    </TabsContent>
                )}
            </Tabs>
           </TooltipProvider>
        </form>
      </Form>
    </div>
  );
}
```

#### **`src/components/admin-tab.tsx`**
```typescript
"use client";

import { useForm, UseFormReturn } from "react-hook-form";
import {
  UserPlus,
  Trash2,
  Edit,
  Save,
  X,
  Target,
  Eye,
  EyeOff,
  Calculator
} from "lucide-react";
import { Dispatch, SetStateAction, useState } from "react";
import { useRouter } from "next/navigation";
import { FormValues, formSchema } from "./goal-getter-dashboard";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { useToast } from "@/hooks/use-toast";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Seller, Incentives } from "@/lib/storage";

const goalTiers = [
    { id: 'Nível 1', goal: 'paGoal1', prize: 'paPrize1'},
    { id: 'Nível 2', goal: 'paGoal2', prize: 'paPrize2' },
    { id: 'Nível 3', goal: 'paGoal3', prize: 'paPrize3' },
    { id: 'Nível 4', goal: 'paGoal4', prize: 'paPrize4' },
];

const ticketMedioTiers = [
    { id: 'Nível 1', goal: 'ticketMedioGoal1', prize: 'ticketMedioPrize1'},
    { id: 'Nível 2', goal: 'ticketMedioGoal2', prize: 'ticketMedioPrize2' },
    { id: 'Nível 3', goal: 'ticketMedioGoal3', prize: 'ticketMedioPrize3' },
    { id: 'Nível 4', goal: 'ticketMedioGoal4', prize: 'ticketMedioPrize4' },
];

const availableAvatarIds = ['avatar1', 'avatar2', 'avatar3', 'avatar4', 'avatar5', 'avatar6', 'avatar7', 'avatar8', 'avatar9', 'avatar10'];

interface AdminTabProps {
    form: UseFormReturn<FormValues>;
    storeId: string;
    setIncentives: Dispatch<SetStateAction<Incentives>>;
}

export function AdminTab({ form, storeId, setIncentives }: AdminTabProps) {
    const { toast } = useToast();
    const router = useRouter();
    const [editingSellerId, setEditingSellerId] = useState<string | null>(null);
    const [showPassword, setShowPassword] = useState<Record<string, boolean>>({});

    const { control, getValues, setValue, setError, clearErrors, formState: { errors } } = form;
    const currentValues = getValues();

    const addSeller = () => {
        const newSellerName = getValues("newSellerName");
        const newSellerPassword = getValues("newSellerPassword");

        if (newSellerName.trim() === "") {
            setError("newSellerName", { type: "manual", message: "Nome é obrigatório." });
            return;
        }
        if (newSellerPassword.trim().length < 4) {
            setError("newSellerPassword", { type: "manual", message: "Senha deve ter no mínimo 4 caracteres." });
            return;
        }
        clearErrors(["newSellerName", "newSellerPassword"]);

        const currentSellers = getValues("sellers") || [];
        const existingAvatarIds = new Set(currentSellers.map(s => s.avatarId));
        let randomAvatarId = availableAvatarIds[Math.floor(Math.random() * availableAvatarIds.length)];

        if (existingAvatarIds.size < availableAvatarIds.length) {
            while (existingAvatarIds.has(randomAvatarId)) {
                randomAvatarId = availableAvatarIds[Math.floor(Math.random() * availableAvatarIds.length)];
            }
        }
        const newSeller: Seller = {
            id: crypto.randomUUID(),
            name: newSellerName,
            password: newSellerPassword,
            avatarId: randomAvatarId,
            vendas: 0, pa: 0, ticketMedio: 0, corridinhaDiaria: 0,
        };
        const updatedSellers = [...currentSellers, newSeller];
        setValue("sellers", updatedSellers, { shouldDirty: true });
        setValue("newSellerName", "");
        setValue("newSellerPassword", "");
        router.push(`/dashboard/${storeId}?tab=${newSeller.id}`);
    };

    const removeSeller = (sellerId: string) => {
        const updatedSellers = (currentValues.sellers || []).filter(s => s.id !== sellerId);
        setValue("sellers", updatedSellers, { shouldDirty: true });
        setIncentives(prev => {
            const newIncentives = { ...prev };
            delete newIncentives[sellerId];
            return newIncentives;
        });
        const newTab = updatedSellers.length > 0 ? updatedSellers[0].id : "admin";
        router.push(`/dashboard/${storeId}?tab=${newTab}`);
    }

    const startEditing = (sellerId: string) => setEditingSellerId(sellerId);
    const cancelEditing = () => setEditingSellerId(null);

    const saveSellerName = (sellerId: string) => {
        const sellerIndex = (currentValues.sellers || []).findIndex(s => s.id === sellerId);
        if (sellerIndex === -1) return;

        const newName = getValues(`sellers.${sellerIndex}.name`);
        const newPassword = getValues(`sellers.${sellerIndex}.password`);
        if (newName.trim() === "") {
            toast({ variant: "destructive", title: "Erro", description: "O nome do vendedor não pode estar vazio." });
            return;
        }
        if (newPassword && newPassword.length < 4) {
            toast({ variant: "destructive", title: "Erro", description: "A senha deve ter pelo menos 4 caracteres." });
            return;
        }

        setEditingSellerId(null);
        toast({ title: "Sucesso!", description: "Dados do vendedor atualizados." });
    }

    const togglePasswordVisibility = (sellerId: string) => {
        setShowPassword(prev => ({ ...prev, [sellerId]: !prev[sellerId] }));
    }
    
    const renderGoalInputs = (level: string, tiers: typeof goalTiers | typeof ticketMedioTiers) => (
        <div>
            <h3 className="font-semibold mb-4 text-primary">{level}</h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-4 gap-y-6">
                {tiers.map(tier => (
                     <div className="space-y-2" key={tier.id}>
                        <h4 className="font-medium text-sm">{tier.id}</h4>
                        <div className="flex items-center gap-2">
                            <FormField control={control} name={`goals.${tier.goal}` as any} render={({ field }) => ( <FormItem className="flex-grow"><FormLabel className="sr-only">Meta</FormLabel><FormControl><Input type="number" placeholder="Meta" {...field} /></FormControl><FormMessage /></FormItem> )}/>
                            <FormField control={control} name={`goals.${tier.prize}` as any} render={({ field }) => ( <FormItem className="flex-grow"><FormLabel className="sr-only">Prêmio</FormLabel><FormControl><Input type="number" placeholder="Prêmio (R$)" {...field} /></FormControl><FormMessage /></FormItem> )}/>
                        </div>
                    </div>
                ))}
            </div>
        </div>
      )

    return (
        <Card className="mt-4">
            <CardHeader>
                <CardTitle>Painel Administrativo da Loja</CardTitle>
            </CardHeader>
            <CardContent className="space-y-10">
                <div className="grid lg:grid-cols-2 gap-x-8 gap-y-10">
                    <div className="space-y-8">
                        <Card>
                            <CardHeader><h3 className="font-semibold text-lg text-primary flex items-center gap-2"><UserPlus /> Gerenciar Vendedores</h3></CardHeader>
                            <CardContent className="space-y-4">
                                <div className="space-y-4">
                                    <FormLabel>Cadastrar Novo Vendedor</FormLabel>
                                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                                        <FormField control={control} name="newSellerName" render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="sr-only">Nome do Vendedor</FormLabel>
                                                <FormControl><Input placeholder="Nome do Vendedor" {...field} /></FormControl>
                                                <FormMessage>{errors.newSellerName?.message}</FormMessage>
                                            </FormItem>
                                        )} />
                                        <FormField control={control} name="newSellerPassword" render={({ field }) => (
                                            <FormItem>
                                                <FormLabel className="sr-only">Senha</FormLabel>
                                                <FormControl><Input type="password" placeholder="Senha" {...field} /></FormControl>
                                                <FormMessage>{errors.newSellerPassword?.message}</FormMessage>
                                            </FormItem>
                                        )} />
                                    </div>
                                    <Button type="button" onClick={addSeller} className="w-full"><UserPlus className="mr-2" /> Adicionar Vendedor</Button>
                                </div>
                                <Separator />
                                <div className="space-y-2">
                                    <FormLabel>Vendedores Atuais</FormLabel>
                                    {(currentValues.sellers || []).length > 0 ? (
                                        <div className="space-y-2 max-h-60 overflow-y-auto pr-2">
                                            {(currentValues.sellers || []).map((seller, index) => (
                                                <div key={seller.id} className="flex items-center justify-between gap-2 p-2 rounded-md bg-muted/50">
                                                    {editingSellerId === seller.id ? (
                                                        <>
                                                            <FormField control={control} name={`sellers.${index}.name`} render={({ field }) => (
                                                                <FormItem className="flex-grow"><FormControl><Input {...field} autoFocus onKeyDown={(e) => { if (e.key === 'Enter') saveSellerName(seller.id); }} /></FormControl></FormItem>
                                                            )} />
                                                            <div className="relative flex-grow">
                                                                <FormField control={control} name={`sellers.${index}.password`} render={({ field }) => (
                                                                    <FormItem><FormControl><Input type={showPassword[seller.id] ? 'text' : 'password'} {...field} onKeyDown={(e) => { if (e.key === 'Enter') saveSellerName(seller.id); }} /></FormControl></FormItem>
                                                                )} />
                                                                <Button size="icon" variant="ghost" type="button" className="absolute right-0 top-1/2 -translate-y-1/2 h-full" onClick={() => togglePasswordVisibility(seller.id)}>
                                                                    {showPassword[seller.id] ? <EyeOff /> : <Eye />}
                                                                </Button>
                                                            </div>
                                                            <Button size="icon" variant="ghost" onClick={() => saveSellerName(seller.id)}><Save className="h-4 w-4 text-green-600" /></Button>
                                                            <Button size="icon" variant="ghost" onClick={cancelEditing}><X className="h-4 w-4" /></Button>
                                                        </>
                                                    ) : (
                                                        <>
                                                            <span className="font-medium">{seller.name}</span>
                                                            <div className="flex items-center">
                                                                <Button size="icon" variant="ghost" onClick={() => startEditing(seller.id)}><Edit className="h-4 w-4" /></Button>
                                                                <AlertDialog>
                                                                    <AlertDialogTrigger asChild><Button size="icon" variant="ghost" className="text-destructive hover:text-destructive"><Trash2 className="h-4 w-4" /></Button></AlertDialogTrigger>
                                                                    <AlertDialogContent>
                                                                        <AlertDialogHeader><AlertDialogTitle>Você tem certeza?</AlertDialogTitle><AlertDialogDescription>Essa ação não pode ser desfeita. Isso irá remover permanentemente o vendedor e seus dados.</AlertDialogDescription></AlertDialogHeader>
                                                                        <AlertDialogFooter><AlertDialogCancel>Cancelar</AlertDialogCancel><AlertDialogAction onClick={() => removeSeller(seller.id)} className="bg-destructive hover:bg-destructive/90">Remover</AlertDialogAction></AlertDialogFooter>
                                                                    </AlertDialogContent>
                                                                </AlertDialog>
                                                            </div>
                                                        </>
                                                    )}
                                                </div>
                                            ))}
                                        </div>
                                    ) : (<p className="text-sm text-muted-foreground text-center py-4">Nenhum vendedor cadastrado.</p>)}
                                </div>
                            </CardContent>
                        </Card>

                        <Card>
                            <CardHeader><h3 className="font-semibold text-lg text-primary flex items-center gap-2"><Target /> Lançar Vendas</h3></CardHeader>
                            <CardContent className="space-y-4 max-h-80 overflow-y-auto pr-2">
                                {(currentValues.sellers || []).length > 0 ? currentValues.sellers.map((seller, index) => (
                                    <div key={seller.id}>
                                        <h4 className="font-medium mb-2">{seller.name}</h4>
                                        <div className="grid grid-cols-2 lg:grid-cols-4 gap-2">
                                            <FormField control={control} name={`sellers.${index}.vendas`} render={({ field }) => (<FormItem><FormLabel className="text-xs">Vendas (R$)</FormLabel><FormControl><Input type="number" {...field} /></FormControl><FormMessage /></FormItem>)} />
                                            <FormField control={control} name={`sellers.${index}.pa`} render={({ field }) => (<FormItem><FormLabel className="text-xs">PA</FormLabel><FormControl><Input type="number" step="0.01" {...field} /></FormControl><FormMessage /></FormItem>)} />
                                            <FormField control={control} name={`sellers.${index}.ticketMedio`} render={({ field }) => (<FormItem><FormLabel className="text-xs">Ticket Médio</FormLabel><FormControl><Input type="number" {...field} /></FormControl><FormMessage /></FormItem>)} />
                                            <FormField control={control} name={`sellers.${index}.corridinhaDiaria`} render={({ field }) => (<FormItem><FormLabel className="text-xs">Corridinha</FormLabel><FormControl><Input type="number" {...field} /></FormControl><FormMessage /></FormItem>)} />
                                        </div>
                                    </div>
                                )) : (<p className="text-sm text-muted-foreground text-center py-4">Cadastre um vendedor para lançar as vendas.</p>)}
                            </CardContent>
                        </Card>
                    </div>

                    <div className="space-y-8">
                        <Card>
                            <CardHeader><h3 className="font-semibold text-lg text-primary">Metas de Vendas</h3></CardHeader>
                            <CardContent className="space-y-6">
                                <div className="space-y-2"><h4 className="font-medium text-sm">Metinha</h4><div className="flex items-center gap-2"><FormField control={control} name="goals.metaMinha" render={({ field }) => (<FormItem className="flex-grow"><FormLabel className="sr-only">Meta</FormLabel><FormControl><Input type="number" placeholder="Meta" {...field} /></FormControl></FormItem>)} /><FormField control={control} name="goals.metaMinhaPrize" render={({ field }) => (<FormItem className="flex-grow"><FormLabel className="sr-only">Prêmio</FormLabel><FormControl><Input type="number" placeholder="Prêmio (R$)" {...field} /></FormControl></FormItem>)} /></div></div>
                                <div className="space-y-2"><h4 className="font-medium text-sm">Meta</h4><div className="flex items-center gap-2"><FormField control={control} name="goals.meta" render={({ field }) => (<FormItem className="flex-grow"><FormLabel className="sr-only">Meta</FormLabel><FormControl><Input type="number" placeholder="Meta" {...field} /></FormControl></FormItem>)} /><FormField control={control} name="goals.metaPrize" render={({ field }) => (<FormItem className="flex-grow"><FormLabel className="sr-only">Prêmio</FormLabel><FormControl><Input type="number" placeholder="Prêmio (R$)" {...field} /></FormControl></FormItem>)} /></div></div>
                                <div className="space-y-2"><h4 className="font-medium text-sm">Metona</h4><div className="flex items-center gap-2"><FormField control={control} name="goals.metona" render={({ field }) => (<FormItem className="flex-grow"><FormLabel className="sr-only">Meta</FormLabel><FormControl><Input type="number" placeholder="Meta" {...field} /></FormControl></FormItem>)} /><FormField control={control} name="goals.metonaPrize" render={({ field }) => (<FormItem className="flex-grow"><FormLabel className="sr-only">Prêmio</FormLabel><FormControl><Input type="number" placeholder="Prêmio (R$)" {...field} /></FormControl></FormItem>)} /></div></div>
                                <div className="space-y-2">
                                    <h4 className="font-medium text-sm">Lendária</h4>
                                    <FormField control={control} name="goals.metaLendaria" render={({ field }) => (<FormItem className="flex-grow"><FormLabel className="sr-only">Meta</FormLabel><FormControl><Input type="number" placeholder="Meta" {...field} /></FormControl></FormItem>)} />
                                    <div className="flex items-center gap-2">
                                        <FormField control={control} name="goals.legendariaBonusValorVenda" render={({ field }) => (<FormItem className="flex-grow"><FormLabel>A cada (R$)</FormLabel><FormControl><Input type="number" placeholder="Valor Venda" {...field} /></FormControl><FormMessage /></FormItem>)} />
                                        <FormField control={control} name="goals.legendariaBonusValorPremio" render={({ field }) => (<FormItem className="flex-grow"><FormLabel>Bônus (R$)</FormLabel><FormControl><Input type="number" placeholder="Valor Prêmio" {...field} /></FormControl><FormMessage /></FormItem>)} />
                                    </div>
                                </div>
                            </CardContent>
                        </Card>

                        <Card>
                            <CardHeader><h3 className="font-semibold text-lg text-primary">Metas de PA e Ticket Médio</h3></CardHeader>
                            <CardContent className="space-y-6">{renderGoalInputs("Metas de PA", goalTiers)}<Separator />{renderGoalInputs("Metas de Ticket Médio", ticketMedioTiers)}</CardContent>
                        </Card>
                    </div>
                </div>
                 <Separator />
                <Button type="submit" size="lg" className="w-full">
                    Salvar Metas e Calcular Todos os Incentivos
                    <Calculator className="ml-2 h-5 w-5"/>
                </Button>
            </CardContent>
        </Card>
    )
}
```

#### **`src/components/seller-tab.tsx`**
```typescript
"use client";

import { Seller, Goals, Incentives } from "@/lib/storage";
import { ProgressDisplay } from "./progress-display";
import { RankingMetric } from "./goal-getter-dashboard";

interface SellerTabProps {
    seller: Seller;
    goals: Goals;
    incentives: Incentives[string];
    rankings: Record<RankingMetric, number> | null;
    loading: boolean;
    themeColor?: string | null;
}

export function SellerTab({ seller, goals, incentives, rankings, loading, themeColor }: SellerTabProps) {
    return (
        <ProgressDisplay
            salesData={{
                vendas: seller.vendas,
                pa: seller.pa,
                ticketMedio: seller.ticketMedio,
                corridinhaDiaria: seller.corridinhaDiaria,
                ...goals
            }}
            incentives={incentives}
            rankings={rankings}
            loading={loading}
            themeColor={themeColor}
        />
    )
}
```

#### **`src/components/progress-display.tsx`**
```typescript
"use client";

import type { IncentiveProjectionOutput } from "@/ai/flows/incentive-projection";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import {
  DollarSign,
  Package,
  Ticket,
  TrendingUp,
  CheckCircle,
  Award,
  Gift,
  Zap,
  Trophy,
  Target,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Separator } from "@/components/ui/separator";
import { Skeleton } from "./ui/skeleton";
import { Goals } from "@/lib/storage";


type RankingMetric = 'vendas' | 'pa' | 'ticketMedio' | 'corridinhaDiaria';

type ProgressDisplaySalesData = {
    vendas: number;
    pa: number;
    ticketMedio: number;
    corridinhaDiaria: number;
} & Goals;

interface ProgressDisplayProps {
  salesData: ProgressDisplaySalesData;
  incentives: IncentiveProjectionOutput | null;
  rankings: Record<RankingMetric, number> | null;
  loading: boolean;
  themeColor?: string | null;
}

const formatCurrency = (value: number) =>
  new Intl.NumberFormat("pt-BR", {
    style: "currency",
    currency: "BRL",
  }).format(value || 0);

const ProgressItem = ({
  icon,
  title,
  currentValue,
  goalValue,
  formatValue = (v) => v.toString(),
  themeColor
}: {
  icon: React.ReactNode;
  title: string;
  currentValue: number;
  goalValue: number;
  formatValue?: (value: number) => string;
  themeColor?: string | null;
}) => {
  const percentage = goalValue > 0 ? Math.min(((currentValue || 0) / goalValue) * 100, 100) : 0;
  
  const progressStyle = themeColor ? {
      background: `linear-gradient(to right, ${themeColor} , ${themeColor}dd)`
  } : {};


  return (
    <div className="space-y-2">
      <div className="flex justify-between items-baseline">
        <div className="flex items-center gap-2 text-sm font-medium text-muted-foreground">
          {icon}
          <span>{title}</span>
        </div>
        <div className="font-semibold flex items-center gap-1 text-sm">
          <span>
            {formatValue(currentValue)} / {formatValue(goalValue)}
          </span>
        </div>
      </div>
       <Progress value={percentage} style={progressStyle} />
    </div>
  );
};


const IncentiveItem = ({
  icon,
  label,
  value,
  achieved,
}: {
  icon: React.ReactNode;
  label: string;
  value: number;
  achieved: boolean;
}) => (
  <div
    className={cn(
      "flex items-center justify-between p-3 rounded-lg transition-all",
      achieved ? "bg-green-100 dark:bg-green-900/30" : "bg-muted/50"
    )}
  >
    <div className="flex items-center gap-3">
      <div
        className={cn(
          "p-1.5 rounded-full bg-opacity-10",
          achieved
            ? "bg-green-500 text-green-600"
            : "bg-primary text-primary"
        )}
      >
        {icon}
      </div>
      <span
        className={cn(
          "font-medium",
          achieved ? "text-green-800 dark:text-green-300" : "text-muted-foreground"
        )}
      >
        {label}
      </span>
    </div>
    <div className="flex items-center gap-2">
      {achieved && <CheckCircle className="w-5 h-5 text-green-500" />}
      <span
        className={cn(
          "font-semibold text-lg",
          achieved ? "text-green-600 dark:text-green-400" : "text-foreground"
        )}
      >
        {formatCurrency(value)}
      </span>
    </div>
  </div>
);

const RankingItem = ({ title, rank }: { title: string; rank?: number }) => {
  const getRankColor = (r?: number) => {
    if (r === 1) return "text-amber-500";
    if (r === 2) return "text-slate-500";
    if (r === 3) return "text-amber-700";
    return "text-muted-foreground";
  };

  return (
    <div className="flex items-center justify-between p-3 rounded-lg bg-muted/30">
        <span className="font-medium text-muted-foreground">{title}</span>
        <div className="flex items-center gap-2">
            <Trophy className={cn("w-5 h-5", getRankColor(rank))} />
            <span className={cn("font-bold text-xl", getRankColor(rank))}>
                {rank ? `${rank}º` : "-"}
            </span>
        </div>
    </div>
  )
};

const SalesGoalDetail = ({ label, goal, current, prize, achieved, isActive }: {label: string; goal: number; current: number; prize: number; achieved: boolean; isActive: boolean; }) => {
    return (
        <div className={cn(
            "flex justify-between items-center p-2 rounded-md transition-all",
            achieved && isActive ? "bg-green-100/80 dark:bg-green-900/30 ring-2 ring-green-500" :
            achieved ? "bg-green-100/50 dark:bg-green-900/20" : 
            "bg-muted/30"
        )}>
            <div className="flex items-center gap-2">
                {achieved ? <CheckCircle className="w-5 h-5 text-green-500"/> : <Target className="w-5 h-5 text-muted-foreground"/>}
                <div>
                    <p className={cn(
                      "font-semibold", 
                      achieved && "text-green-700 dark:text-green-300",
                      !achieved && "text-muted-foreground"
                    )}>{label}</p>
                    <p className="text-xs text-muted-foreground">{formatCurrency(current)} / {formatCurrency(goal)}</p>
                </div>
            </div>
            <p className={cn(
                "font-bold text-lg", 
                achieved && isActive ? "text-green-600 dark:text-green-400" :
                achieved ? "text-green-500/70 dark:text-green-400/70" : 
                "text-muted-foreground"
              )}>{formatCurrency(prize)}</p>
        </div>
    )
}

const EmptyIncentives = () => (
    <div className="text-center py-10 text-muted-foreground flex flex-col items-center gap-4 rounded-lg bg-muted/50 p-6">
        <div className="w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center">
            <Award className="h-8 w-8 text-primary" />
        </div>
        <div>
            <p className="font-semibold text-lg text-foreground">
                Nenhuma meta atingida ainda
            </p>
            <p className="text-sm mt-1">
                Continue no seu ritmo que você chega lá!
            </p>
        </div>
    </div>
);

export function ProgressDisplay({ salesData, incentives, rankings, loading, themeColor }: ProgressDisplayProps) {
  const {
    vendas,
    pa,
    ticketMedio,
    corridinhaDiaria,
    metaMinha,
    metaMinhaPrize,
    meta,
    metaPrize,
    metona,
    metonaPrize,
    metaLendaria,
    paGoal4,
    ticketMedioGoal4,
  } = salesData;

  const salesPercentage = metaLendaria > 0 ? (vendas / metaLendaria) * 100 : 0;
  
  const totalIncentives = incentives
    ? (incentives.metinhaPremio || 0) +
      (incentives.metaPremio || 0) +
      (incentives.metonaPremio || 0) +
      (incentives.legendariaBonus || 0) +
      (incentives.paBonus || 0) +
      (incentives.ticketMedioBonus || 0) +
      (incentives.corridinhaDiariaBonus || 0)
    : 0;

  const renderSkeletons = () => (
     <div className="space-y-4">
      <div className="flex justify-between items-center">
        <Skeleton className="h-8 w-1/3" />
        <Skeleton className="h-12 w-1/4" />
      </div>
       <Separator/>
      <div className="space-y-2 pt-4">
        <Skeleton className="h-12 w-full" />
        <Skeleton className="h-12 w-full" />
        <Skeleton className="h-12 w-full" />
        <Skeleton className="h-12 w-full" />
      </div>
    </div>
  );
  
  const metinhaAchieved = vendas >= metaMinha;
  const metaAchieved = vendas >= meta;
  const metonaAchieved = vendas >= metona;
  const lendariaAchieved = vendas >= metaLendaria;

  const headerStyle = themeColor ? { color: themeColor } : {};
  
  return (
    <Card className="shadow-lg border-2 border-transparent transition-all overflow-hidden">
      <CardHeader>
        <CardTitle>Dashboard de Progresso e Incentivos</CardTitle>
        <CardDescription>
          Sua jornada para o sucesso em tempo real.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-8" data-achieved={totalIncentives > 0}>

        <div className="grid grid-cols-1 gap-6">
            <Card className="bg-gradient-to-r from-emerald-100 to-green-50 border-emerald-200 shadow-md hover:shadow-lg transition-all rounded-2xl">
                <CardHeader className="flex flex-row items-center justify-between pb-2">
                    <CardTitle className="text-lg font-semibold text-emerald-800">
                    Seu Ganho Total
                    </CardTitle>
                    <DollarSign className="h-6 w-6 text-emerald-600" />
                </CardHeader>
                <CardContent>
                    <p className="text-3xl font-bold text-emerald-700">
                    {formatCurrency(totalIncentives)}
                    </p>
                    <p className="text-sm text-muted-foreground">
                    Valor acumulado das metas
                    </p>
                </CardContent>
            </Card>
        </div>


        <div>
          <div className="flex items-center gap-2 mb-2">
            <Target className="w-6 h-6 text-primary" style={headerStyle} />
            <h3 className="text-xl font-semibold">Progresso de Vendas</h3>
          </div>
          <div className="relative pt-6">
            <Progress value={salesPercentage} className="h-4" style={{background: 'hsl(var(--secondary))'}} indicatorStyle={{ background: `linear-gradient(to right, ${themeColor || 'hsl(var(--primary))'} , #34d399)`}}/>
            {metaLendaria > 0 && (
              <>
                <div
                  className="absolute top-0 h-full border-r-2 border-dashed border-foreground/20"
                  style={{ left: `${(metaMinha / metaLendaria) * 100}%` }}
                  title={`Metinha: ${formatCurrency(metaMinha)}`}
                >
                  <span className="absolute -top-6 -translate-x-1/2 text-xs font-bold text-muted-foreground">Metinha</span>
                </div>
                <div
                  className="absolute top-0 h-full border-r-2 border-dashed border-foreground/20"
                  style={{ left: `${(meta / metaLendaria) * 100}%` }}
                  title={`Meta: ${formatCurrency(meta)}`}
                >
                  <span className="absolute -top-6 -translate-x-1/2 text-xs font-bold text-muted-foreground">Meta</span>
                </div>
                <div
                  className="absolute top-0 h-full border-r-2 border-dashed border-foreground/20"
                  style={{ left: `${(metona / metaLendaria) * 100}%` }}
                  title={`Metona: ${formatCurrency(metona)}`}
                >
                  <span className="absolute -top-6 -translate-x-1/2 text-xs font-bold text-muted-foreground">Metona</span>
                </div>
                <div
                  className="absolute top-0 h-full"
                  style={{ left: `100%` }}
                  title={`Lendária: ${formatCurrency(metaLendaria)}`}
                >
                  <span className="absolute -top-6 -translate-x-1/2 text-xs font-bold text-muted-foreground">Lendária</span>
                </div>
              </>
            )}
          </div>
          <div className="text-right mt-2 font-bold text-lg text-primary" style={headerStyle}>
            {formatCurrency(vendas)} / {formatCurrency(metaLendaria)}
          </div>
        </div>
        
        {loading ? (
            <div className="space-y-2"><Skeleton className="h-8 w-full" /><Skeleton className="h-8 w-full" /><Skeleton className="h-8 w-full" /></div>
        ) : incentives && metinhaAchieved ? (
            <div className="space-y-3 p-4 border rounded-lg bg-muted/30">
                <h3 className="font-semibold text-center text-muted-foreground mb-2">Detalhes dos Prêmios de Vendas</h3>
                <SalesGoalDetail label="Prêmio Metinha" goal={metaMinha} current={vendas} prize={metaMinhaPrize} achieved={metinhaAchieved} isActive={metinhaAchieved && !metaAchieved} />
                <SalesGoalDetail label="Prêmio Meta" goal={meta} current={vendas} prize={metaPrize} achieved={metaAchieved} isActive={metaAchieved && !metonaAchieved} />
                <SalesGoalDetail label="Prêmio Metona" goal={metona} current={vendas} prize={metonaPrize} achieved={metonaAchieved} isActive={metonaAchieved} />
                <SalesGoalDetail label="Bônus Lendária" goal={metaLendaria} current={vendas} prize={incentives.legendariaBonus} achieved={lendariaAchieved} isActive={lendariaAchieved} />
            </div>
        ) : (
            <EmptyIncentives />
        )}

        <div className="grid sm:grid-cols-1 md:grid-cols-2 gap-6 pt-4">
          <Card>
            <CardHeader className="pb-4">
              <CardTitle className="text-lg flex items-center gap-2"><Package/> Desempenho Adicional</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <ProgressItem
                icon={<Package className="w-5 h-5" />}
                title="Produtos por Atendimento (PA)"
                currentValue={pa}
                goalValue={paGoal4}
                formatValue={(v) => (typeof v === 'number' ? v.toFixed(2) : Number(v || 0).toFixed(2))}
                themeColor={themeColor}
              />
              <ProgressItem
                icon={<Ticket className="w-5 h-5" />}
                title="Ticket Médio"
                currentValue={ticketMedio}
                goalValue={ticketMedioGoal4}
                formatValue={formatCurrency}
                themeColor={themeColor}
              />
              <ProgressItem
                icon={<TrendingUp className="w-5 h-5" />}
                title="Corridinha Diária"
                currentValue={corridinhaDiaria}
                goalValue={corridinhaDiaria > 0 ? corridinhaDiaria : 1}
                formatValue={formatCurrency}
                themeColor={themeColor}
              />
            </CardContent>
          </Card>

          {rankings && (
            <Card>
                <CardHeader className="pb-4">
                    <CardTitle className="text-lg flex items-center gap-2"><Trophy/> Ranking Geral</CardTitle>
                </CardHeader>
                <CardContent className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <RankingItem title="Vendas" rank={rankings.vendas} />
                    <RankingItem title="PA" rank={rankings.pa} />
                    <RankingItem title="Ticket Médio" rank={rankings.ticketMedio} />
                    <RankingItem title="Corridinha" rank={rankings.corridinhaDiaria} />
                </CardContent>
            </Card>
          )}
        </div>

        <Separator/>

        <div className="pt-4">
          {loading ? (
            renderSkeletons()
          ) : incentives && totalIncentives > 0 ? (
            <div className="space-y-4">
               <h3 className="font-semibold text-center text-muted-foreground mb-4">Detalhes dos Outros Prêmios</h3>
              <div className="space-y-2">
                <IncentiveItem
                  icon={<Gift className="w-5 h-5" />}
                  label="Bônus PA"
                  value={incentives.paBonus}
                  achieved={incentives.paBonus > 0}
                />
                <IncentiveItem
                  icon={<Gift className="w-5 h-5" />}
                  label="Bônus Ticket Médio"
                  value={incentives.ticketMedioBonus}
                  achieved={incentives.ticketMedioBonus > 0}
                />
                <IncentiveItem
                  icon={<Zap className="w-5 h-5" />}
                  label="Bônus Corridinha"
                  value={incentives.corridinhaDiariaBonus}
                  achieved={incentives.corridinhaDiariaBonus > 0}
                />
              </div>
            </div>
          ) : !loading && (
             <div></div>
          )}
        </div>


      </CardContent>
    </Card>
  );
}
```